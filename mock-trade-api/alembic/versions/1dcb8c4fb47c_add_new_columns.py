"""Add new columns

Revision ID: 1dcb8c4fb47c
Revises: 5347d3a259a0
Create Date: 2025-10-16 13:59:57.777551

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1dcb8c4fb47c'
down_revision: Union[str, Sequence[str], None] = '5347d3a259a0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trader')
    op.drop_table('trade_hdr')
    op.drop_table('final_settlement_price')
    op.drop_table('eod_pnl')
    op.drop_table('account')
    op.drop_table('position_daily')
    op.drop_table('broker')
    op.drop_table('audit_log')
    op.drop_table('variation_margin')
    op.drop_table('trade_allocation')
    op.drop_table('order_hdr')
    op.drop_table('instrument')
    op.drop_table('settlement_price')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('settlement_price',
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('val_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('settle_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('settlement_price_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('instrument_id', 'val_date', name=op.f('settlement_price_pkey'))
    )
    op.create_table('instrument',
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('exchange', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('product_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contract_month', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tick_size', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tick_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('contract_multiplier', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('instrument_id', name='instrument_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('order_hdr',
    sa.Column('order_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('side', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('limit_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tif', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trader_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("side::text = ANY (ARRAY['BUY'::character varying, 'SELL'::character varying]::text[])", name='order_hdr_side_check'),
    sa.CheckConstraint('qty > 0', name='order_hdr_qty_check'),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name='order_hdr_account_id_fkey'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name='order_hdr_instrument_id_fkey'),
    sa.ForeignKeyConstraint(['trader_id'], ['trader.trader_id'], name='order_hdr_trader_id_fkey'),
    sa.PrimaryKeyConstraint('order_id', name='order_hdr_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('trade_allocation',
    sa.Column('allocation_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('trade_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('alloc_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name=op.f('trade_allocation_account_id_fkey')),
    sa.ForeignKeyConstraint(['trade_id'], ['trade_hdr.trade_id'], name=op.f('trade_allocation_trade_id_fkey')),
    sa.PrimaryKeyConstraint('allocation_id', name=op.f('trade_allocation_pkey'))
    )
    op.create_table('variation_margin',
    sa.Column('vm_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('val_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('prev_settle', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('today_settle', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('net_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contract_multiplier', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vm_amount', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name=op.f('variation_margin_account_id_fkey')),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('variation_margin_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('vm_id', name=op.f('variation_margin_pkey'))
    )
    op.create_table('audit_log',
    sa.Column('audit_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('before_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('after_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('audit_id', name=op.f('audit_log_pkey'))
    )
    op.create_table('broker',
    sa.Column('broker_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('broker_id', name='broker_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('position_daily',
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('val_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('net_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('open_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('close_qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name=op.f('position_daily_account_id_fkey')),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('position_daily_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('instrument_id', 'account_id', 'val_date', name=op.f('position_daily_pkey'))
    )
    op.create_table('account',
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('account_id', name='account_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('eod_pnl',
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('val_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('realized_pnl', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('unrealized_pnl', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('total_pnl', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name=op.f('eod_pnl_account_id_fkey')),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('eod_pnl_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('instrument_id', 'account_id', 'val_date', name=op.f('eod_pnl_pkey'))
    )
    op.create_table('final_settlement_price',
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('val_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('final_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('final_settlement_price_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('instrument_id', 'val_date', name=op.f('final_settlement_price_pkey'))
    )
    op.create_table('trade_hdr',
    sa.Column('trade_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('instrument_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('side', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qty', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('trader_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('exec_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('broker_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('account_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reversal_of_trade_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('roll_group_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("side::text = ANY (ARRAY['BUY'::character varying, 'SELL'::character varying]::text[])", name=op.f('trade_hdr_side_check')),
    sa.CheckConstraint('price >= 0::numeric', name=op.f('trade_hdr_price_check')),
    sa.CheckConstraint('qty > 0', name=op.f('trade_hdr_qty_check')),
    sa.ForeignKeyConstraint(['account_id'], ['account.account_id'], name=op.f('trade_hdr_account_id_fkey')),
    sa.ForeignKeyConstraint(['broker_id'], ['broker.broker_id'], name=op.f('trade_hdr_broker_id_fkey')),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.instrument_id'], name=op.f('trade_hdr_instrument_id_fkey')),
    sa.ForeignKeyConstraint(['order_id'], ['order_hdr.order_id'], name=op.f('trade_hdr_order_id_fkey')),
    sa.ForeignKeyConstraint(['trader_id'], ['trader.trader_id'], name=op.f('trade_hdr_trader_id_fkey')),
    sa.PrimaryKeyConstraint('trade_id', name=op.f('trade_hdr_pkey'))
    )
    op.create_table('trader',
    sa.Column('trader_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('desk', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('trader_id', name=op.f('trader_pkey'))
    )
    # ### end Alembic commands ###
